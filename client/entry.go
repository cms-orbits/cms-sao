// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "SAO": entry Resource Client
//
// Command:
// $ goagen
// --design=github.com/jossemargt/cms-sao/design
// --force=true
// --notool=true
// --out=$(GOPATH)/src/github.com/jossemargt/cms-sao
// --version=v1.4.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// GetEntryPath computes a request path to the get action of entry.
func GetEntryPath(entryID string) string {
	param0 := entryID

	return fmt.Sprintf("/sao/v1/entries/%s", param0)
}

// Get the complete entry metadata (excluding the associated sources) for the given ID
func (c *Client) GetEntry(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetEntryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetEntryRequest create the request corresponding to the get action endpoint of the entry resource.
func (c *Client) NewGetEntryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowEntryPath computes a request path to the show action of entry.
func ShowEntryPath() string {

	return fmt.Sprintf("/sao/v1/entries/")
}

// List the ranked entries without their sources.
func (c *Client) ShowEntry(ctx context.Context, path string, page *int, pageSize *int) (*http.Response, error) {
	req, err := c.NewShowEntryRequest(ctx, path, page, pageSize)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowEntryRequest create the request corresponding to the show action endpoint of the entry resource.
func (c *Client) NewShowEntryRequest(ctx context.Context, path string, page *int, pageSize *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if page != nil {
		tmp6 := strconv.Itoa(*page)
		values.Set("page", tmp6)
	}
	if pageSize != nil {
		tmp7 := strconv.Itoa(*pageSize)
		values.Set("page_size", tmp7)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
