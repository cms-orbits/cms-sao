// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "SAO v1": entry Resource Client
//
// Command:
// $ goagen
// --design=github.com/jossemargt/cms-sao/design
// --force=true
// --notool=true
// --out=$(GOPATH)/src/github.com/jossemargt/cms-sao
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateEntryPath computes a request path to the create action of entry.
func CreateEntryPath() string {

	return fmt.Sprintf("/sao/v1/entries/")
}

// Create a new entry
func (c *Client) CreateEntry(ctx context.Context, path string, payload *EntryPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateEntryRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateEntryRequest create the request corresponding to the create action endpoint of the entry resource.
func (c *Client) NewCreateEntryRequest(ctx context.Context, path string, payload *EntryPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// GetEntryPath computes a request path to the get action of entry.
func GetEntryPath(entryID string) string {
	param0 := entryID

	return fmt.Sprintf("/sao/v1/entries/%s", param0)
}

// Returns all the entry metadata (without the sources) for the given ID
func (c *Client) GetEntry(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetEntryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetEntryRequest create the request corresponding to the get action endpoint of the entry resource.
func (c *Client) NewGetEntryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowEntryPath computes a request path to the show action of entry.
func ShowEntryPath() string {

	return fmt.Sprintf("/sao/v1/entries/")
}

// List all the ranked entries without their sources.
func (c *Client) ShowEntry(ctx context.Context, path string, page *int, pageSize *int) (*http.Response, error) {
	req, err := c.NewShowEntryRequest(ctx, path, page, pageSize)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowEntryRequest create the request corresponding to the show action endpoint of the entry resource.
func (c *Client) NewShowEntryRequest(ctx context.Context, path string, page *int, pageSize *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if page != nil {
		tmp1 := strconv.Itoa(*page)
		values.Set("page", tmp1)
	}
	if pageSize != nil {
		tmp2 := strconv.Itoa(*pageSize)
		values.Set("page_size", tmp2)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
