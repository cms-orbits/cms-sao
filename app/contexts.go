// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "SAO": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/jossemargt/cms-sao/design
// --force=true
// --notool=true
// --out=$(GOPATH)/src/github.com/jossemargt/cms-sao
// --version=v1.4.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// SubmitEntryActionsContext provides the actions submitEntry action context.
type SubmitEntryActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *EntryPayload
}

// NewSubmitEntryActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller submitEntry action.
func NewSubmitEntryActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SubmitEntryActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SubmitEntryActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// CreatedFull sends a HTTP response with status code 201.
func (ctx *SubmitEntryActionsContext) CreatedFull(r *ComJossemargtSaoEntryFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SubmitEntryActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *SubmitEntryActionsContext) NotImplemented() error {
	ctx.ResponseData.WriteHeader(501)
	return nil
}

// SummarizeScoreActionsContext provides the actions summarizeScore action context.
type SummarizeScoreActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest  *int
	GroupBy  string
	Page     int
	PageSize int
	Sort     string
	Task     *int
	User     *int
}

// NewSummarizeScoreActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller summarizeScore action.
func NewSummarizeScoreActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SummarizeScoreActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SummarizeScoreActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) > 0 {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			tmp2 := contest
			tmp1 := &tmp2
			rctx.Contest = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
	}
	paramGroupBy := req.Params["groupBy"]
	if len(paramGroupBy) == 0 {
		rctx.GroupBy = "none"
	} else {
		rawGroupBy := paramGroupBy[0]
		rctx.GroupBy = rawGroupBy
		if !(rctx.GroupBy == "contest" || rctx.GroupBy == "task" || rctx.GroupBy == "user" || rctx.GroupBy == "none") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`groupBy`, rctx.GroupBy, []interface{}{"contest", "task", "user", "none"}))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 20
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) > 0 {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			tmp6 := task
			tmp5 := &tmp6
			rctx.Task = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
	}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			tmp8 := user
			tmp7 := &tmp8
			rctx.User = tmp7
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SummarizeScoreActionsContext) OK(r ComJossemargtSaoScoresumCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.scoresum+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoScoresumCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SummarizeScoreActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SummarizeScoreActionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *SummarizeScoreActionsContext) NotImplemented() error {
	ctx.ResponseData.WriteHeader(501)
	return nil
}

// GetEntryContext provides the entry get action context.
type GetEntryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EntryID string
}

// NewGetEntryContext parses the incoming request URL and body, performs validations and creates the
// context used by the entry controller get action.
func NewGetEntryContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetEntryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetEntryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEntryID := req.Params["entryID"]
	if len(paramEntryID) > 0 {
		rawEntryID := paramEntryID[0]
		rctx.EntryID = rawEntryID
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetEntryContext) OKFull(r *ComJossemargtSaoEntryFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetEntryContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetEntryContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetEntryContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowEntryContext provides the entry show action context.
type ShowEntryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Page     int
	PageSize int
}

// NewShowEntryContext parses the incoming request URL and body, performs validations and creates the
// context used by the entry controller show action.
func NewShowEntryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowEntryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowEntryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 20
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowEntryContext) OK(r ComJossemargtSaoEntryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowEntryContext) OKFull(r ComJossemargtSaoEntryFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowEntryContext) OKLink(r ComJossemargtSaoEntryLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowEntryContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowEntryContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// GetResultContext provides the result get action context.
type GetResultContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ResultID string
}

// NewGetResultContext parses the incoming request URL and body, performs validations and creates the
// context used by the result controller get action.
func NewGetResultContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetResultContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetResultContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramResultID := req.Params["resultID"]
	if len(paramResultID) > 0 {
		rawResultID := paramResultID[0]
		rctx.ResultID = rawResultID
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetResultContext) OKFull(r *ComJossemargtSaoResultFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetResultContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetResultContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowResultContext provides the result show action context.
type ShowResultContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest  *int
	Entry    *int
	Page     int
	PageSize int
	Ranked   bool
	Sort     string
	Task     *int
	User     *int
}

// NewShowResultContext parses the incoming request URL and body, performs validations and creates the
// context used by the result controller show action.
func NewShowResultContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowResultContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowResultContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) > 0 {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			tmp12 := contest
			tmp11 := &tmp12
			rctx.Contest = tmp11
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
	}
	paramEntry := req.Params["entry"]
	if len(paramEntry) > 0 {
		rawEntry := paramEntry[0]
		if entry, err2 := strconv.Atoi(rawEntry); err2 == nil {
			tmp14 := entry
			tmp13 := &tmp14
			rctx.Entry = tmp13
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("entry", rawEntry, "integer"))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 20
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramRanked := req.Params["ranked"]
	if len(paramRanked) == 0 {
		rctx.Ranked = true
	} else {
		rawRanked := paramRanked[0]
		if ranked, err2 := strconv.ParseBool(rawRanked); err2 == nil {
			rctx.Ranked = ranked
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ranked", rawRanked, "boolean"))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) > 0 {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			tmp19 := task
			tmp18 := &tmp19
			rctx.Task = tmp18
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
	}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			tmp21 := user
			tmp20 := &tmp21
			rctx.User = tmp20
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowResultContext) OK(r ComJossemargtSaoResultCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowResultContext) OKFull(r ComJossemargtSaoResultFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowResultContext) OKLink(r ComJossemargtSaoResultLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowResultContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetScoresContext provides the scores get action context.
type GetScoresContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ScoreID string
}

// NewGetScoresContext parses the incoming request URL and body, performs validations and creates the
// context used by the scores controller get action.
func NewGetScoresContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetScoresContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetScoresContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramScoreID := req.Params["scoreID"]
	if len(paramScoreID) > 0 {
		rawScoreID := paramScoreID[0]
		rctx.ScoreID = rawScoreID
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetScoresContext) OKFull(r *ComJossemargtSaoScoreFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.score+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetScoresContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetScoresContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowScoresContext provides the scores show action context.
type ShowScoresContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest  *int
	Entry    *int
	Page     int
	PageSize int
	Sort     string
	Task     *int
	User     *int
}

// NewShowScoresContext parses the incoming request URL and body, performs validations and creates the
// context used by the scores controller show action.
func NewShowScoresContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowScoresContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowScoresContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) > 0 {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			tmp23 := contest
			tmp22 := &tmp23
			rctx.Contest = tmp22
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
	}
	paramEntry := req.Params["entry"]
	if len(paramEntry) > 0 {
		rawEntry := paramEntry[0]
		if entry, err2 := strconv.Atoi(rawEntry); err2 == nil {
			tmp25 := entry
			tmp24 := &tmp25
			rctx.Entry = tmp24
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("entry", rawEntry, "integer"))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 20
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) > 0 {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			tmp29 := task
			tmp28 := &tmp29
			rctx.Task = tmp28
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
	}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			tmp31 := user
			tmp30 := &tmp31
			rctx.User = tmp30
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowScoresContext) OK(r ComJossemargtSaoScoreCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.score+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoScoreCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowScoresContext) OKFull(r ComJossemargtSaoScoreFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.score+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoScoreFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowScoresContext) OKLink(r ComJossemargtSaoScoreLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.score+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoScoreLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowScoresContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
