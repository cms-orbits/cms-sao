// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "SAO": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/jossemargt/cms-sao/design
// --notool=true
// --out=$(GOPATH)/src/github.com/jossemargt/cms-sao
// --version=v1.4.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// SubmitEntryActionsContext provides the actions submitEntry action context.
type SubmitEntryActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *EntryPayload
}

// NewSubmitEntryActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller submitEntry action.
func NewSubmitEntryActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SubmitEntryActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SubmitEntryActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// CreatedFull sends a HTTP response with status code 201.
func (ctx *SubmitEntryActionsContext) CreatedFull(r *ComJossemargtSaoEntryFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SubmitEntryActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *SubmitEntryActionsContext) NotImplemented() error {
	ctx.ResponseData.WriteHeader(501)
	return nil
}

// SubmitEntryDraftActionsContext provides the actions submitEntryDraft action context.
type SubmitEntryDraftActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *EntryPayload
}

// NewSubmitEntryDraftActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller submitEntryDraft action.
func NewSubmitEntryDraftActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SubmitEntryDraftActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SubmitEntryDraftActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// CreatedFull sends a HTTP response with status code 201.
func (ctx *SubmitEntryDraftActionsContext) CreatedFull(r *ComJossemargtSaoEntryFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SubmitEntryDraftActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *SubmitEntryDraftActionsContext) NotImplemented() error {
	ctx.ResponseData.WriteHeader(501)
	return nil
}

// SummarizeScoreActionsContext provides the actions summarizeScore action context.
type SummarizeScoreActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest  *int
	GroupBy  string
	Page     int
	PageSize int
	Sort     string
	Task     *int
	User     *int
}

// NewSummarizeScoreActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller summarizeScore action.
func NewSummarizeScoreActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SummarizeScoreActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SummarizeScoreActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) > 0 {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			tmp2 := contest
			tmp1 := &tmp2
			rctx.Contest = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
		if rctx.Contest != nil {
			if *rctx.Contest < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`contest`, *rctx.Contest, 0, true))
			}
		}
	}
	paramGroupBy := req.Params["groupBy"]
	if len(paramGroupBy) == 0 {
		rctx.GroupBy = "none"
	} else {
		rawGroupBy := paramGroupBy[0]
		rctx.GroupBy = rawGroupBy
		if !(rctx.GroupBy == "contest" || rctx.GroupBy == "task" || rctx.GroupBy == "user" || rctx.GroupBy == "none") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`groupBy`, rctx.GroupBy, []interface{}{"contest", "task", "user", "none"}))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 20
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) > 0 {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			tmp6 := task
			tmp5 := &tmp6
			rctx.Task = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
		if rctx.Task != nil {
			if *rctx.Task < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`task`, *rctx.Task, 0, true))
			}
		}
	}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			tmp8 := user
			tmp7 := &tmp8
			rctx.User = tmp7
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
		if rctx.User != nil {
			if *rctx.User < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`user`, *rctx.User, 0, true))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SummarizeScoreActionsContext) OK(r ComJossemargtSaoScoresumCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.scoresum+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoScoresumCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SummarizeScoreActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SummarizeScoreActionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *SummarizeScoreActionsContext) NotImplemented() error {
	ctx.ResponseData.WriteHeader(501)
	return nil
}

// GetDraftContext provides the draft get action context.
type GetDraftContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DraftID int
}

// NewGetDraftContext parses the incoming request URL and body, performs validations and creates the
// context used by the draft controller get action.
func NewGetDraftContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetDraftContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetDraftContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDraftID := req.Params["draftID"]
	if len(paramDraftID) > 0 {
		rawDraftID := paramDraftID[0]
		if draftID, err2 := strconv.Atoi(rawDraftID); err2 == nil {
			rctx.DraftID = draftID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("draftID", rawDraftID, "integer"))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetDraftContext) OKFull(r *ComJossemargtSaoEntryFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetDraftContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetDraftContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetDraftContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowDraftContext provides the draft show action context.
type ShowDraftContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest  *int
	Page     int
	PageSize int
	Sort     string
	Task     *int
	User     *int
}

// NewShowDraftContext parses the incoming request URL and body, performs validations and creates the
// context used by the draft controller show action.
func NewShowDraftContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowDraftContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowDraftContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) > 0 {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			tmp11 := contest
			tmp10 := &tmp11
			rctx.Contest = tmp10
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
		if rctx.Contest != nil {
			if *rctx.Contest < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`contest`, *rctx.Contest, 0, true))
			}
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 10
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) > 0 {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			tmp15 := task
			tmp14 := &tmp15
			rctx.Task = tmp14
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
		if rctx.Task != nil {
			if *rctx.Task < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`task`, *rctx.Task, 0, true))
			}
		}
	}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			tmp17 := user
			tmp16 := &tmp17
			rctx.User = tmp16
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
		if rctx.User != nil {
			if *rctx.User < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`user`, *rctx.User, 0, true))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowDraftContext) OK(r ComJossemargtSaoEntryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowDraftContext) OKFull(r ComJossemargtSaoEntryFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowDraftContext) OKLink(r ComJossemargtSaoEntryLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowDraftContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowDraftContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// GetDraftresultContext provides the draftresult get action context.
type GetDraftresultContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ResultID string
}

// NewGetDraftresultContext parses the incoming request URL and body, performs validations and creates the
// context used by the draftresult controller get action.
func NewGetDraftresultContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetDraftresultContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetDraftresultContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramResultID := req.Params["resultID"]
	if len(paramResultID) > 0 {
		rawResultID := paramResultID[0]
		rctx.ResultID = rawResultID
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetDraftresultContext) OKFull(r *ComJossemargtSaoResultFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetDraftresultContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetDraftresultContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowDraftresultContext provides the draftresult show action context.
type ShowDraftresultContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest  *int
	Entry    *int
	Page     int
	PageSize int
	Sort     string
	Task     *int
	User     *int
}

// NewShowDraftresultContext parses the incoming request URL and body, performs validations and creates the
// context used by the draftresult controller show action.
func NewShowDraftresultContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowDraftresultContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowDraftresultContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) > 0 {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			tmp19 := contest
			tmp18 := &tmp19
			rctx.Contest = tmp18
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
		if rctx.Contest != nil {
			if *rctx.Contest < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`contest`, *rctx.Contest, 0, true))
			}
		}
	}
	paramEntry := req.Params["entry"]
	if len(paramEntry) > 0 {
		rawEntry := paramEntry[0]
		if entry, err2 := strconv.Atoi(rawEntry); err2 == nil {
			tmp21 := entry
			tmp20 := &tmp21
			rctx.Entry = tmp20
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("entry", rawEntry, "integer"))
		}
		if rctx.Entry != nil {
			if *rctx.Entry < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`entry`, *rctx.Entry, 0, true))
			}
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 10
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) > 0 {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			tmp25 := task
			tmp24 := &tmp25
			rctx.Task = tmp24
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
		if rctx.Task != nil {
			if *rctx.Task < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`task`, *rctx.Task, 0, true))
			}
		}
	}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			tmp27 := user
			tmp26 := &tmp27
			rctx.User = tmp26
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
		if rctx.User != nil {
			if *rctx.User < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`user`, *rctx.User, 0, true))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowDraftresultContext) OK(r ComJossemargtSaoResultCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowDraftresultContext) OKFull(r ComJossemargtSaoResultFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowDraftresultContext) OKLink(r ComJossemargtSaoResultLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowDraftresultContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetEntryContext provides the entry get action context.
type GetEntryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EntryID int
}

// NewGetEntryContext parses the incoming request URL and body, performs validations and creates the
// context used by the entry controller get action.
func NewGetEntryContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetEntryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetEntryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEntryID := req.Params["entryID"]
	if len(paramEntryID) > 0 {
		rawEntryID := paramEntryID[0]
		if entryID, err2 := strconv.Atoi(rawEntryID); err2 == nil {
			rctx.EntryID = entryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("entryID", rawEntryID, "integer"))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetEntryContext) OKFull(r *ComJossemargtSaoEntryFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetEntryContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetEntryContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetEntryContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowEntryContext provides the entry show action context.
type ShowEntryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest     int
	ContestSlug string
	Page        int
	PageSize    int
	Sort        string
	Task        int
	TaskSlug    string
	User        int
}

// NewShowEntryContext parses the incoming request URL and body, performs validations and creates the
// context used by the entry controller show action.
func NewShowEntryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowEntryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowEntryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) == 0 {
		rctx.Contest = 0
	} else {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			rctx.Contest = contest
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
	}
	paramContestSlug := req.Params["contest_slug"]
	if len(paramContestSlug) == 0 {
		rctx.ContestSlug = ""
	} else {
		rawContestSlug := paramContestSlug[0]
		rctx.ContestSlug = rawContestSlug
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 10
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) == 0 {
		rctx.Task = 0
	} else {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			rctx.Task = task
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
	}
	paramTaskSlug := req.Params["task_slug"]
	if len(paramTaskSlug) == 0 {
		rctx.TaskSlug = ""
	} else {
		rawTaskSlug := paramTaskSlug[0]
		rctx.TaskSlug = rawTaskSlug
	}
	paramUser := req.Params["user"]
	if len(paramUser) == 0 {
		rctx.User = 0
	} else {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			rctx.User = user
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowEntryContext) OK(r ComJossemargtSaoEntryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowEntryContext) OKFull(r ComJossemargtSaoEntryFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowEntryContext) OKLink(r ComJossemargtSaoEntryLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowEntryContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowEntryContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// GetResultContext provides the result get action context.
type GetResultContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ResultID string
}

// NewGetResultContext parses the incoming request URL and body, performs validations and creates the
// context used by the result controller get action.
func NewGetResultContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetResultContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetResultContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramResultID := req.Params["resultID"]
	if len(paramResultID) > 0 {
		rawResultID := paramResultID[0]
		rctx.ResultID = rawResultID
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetResultContext) OKFull(r *ComJossemargtSaoResultFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetResultContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetResultContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowResultContext provides the result show action context.
type ShowResultContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest  *int
	Entry    *int
	Page     int
	PageSize int
	Ranked   bool
	Sort     string
	Task     *int
	User     *int
}

// NewShowResultContext parses the incoming request URL and body, performs validations and creates the
// context used by the result controller show action.
func NewShowResultContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowResultContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowResultContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) > 0 {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			tmp35 := contest
			tmp34 := &tmp35
			rctx.Contest = tmp34
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
		if rctx.Contest != nil {
			if *rctx.Contest < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`contest`, *rctx.Contest, 0, true))
			}
		}
	}
	paramEntry := req.Params["entry"]
	if len(paramEntry) > 0 {
		rawEntry := paramEntry[0]
		if entry, err2 := strconv.Atoi(rawEntry); err2 == nil {
			tmp37 := entry
			tmp36 := &tmp37
			rctx.Entry = tmp36
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("entry", rawEntry, "integer"))
		}
		if rctx.Entry != nil {
			if *rctx.Entry < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`entry`, *rctx.Entry, 0, true))
			}
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 10
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramRanked := req.Params["ranked"]
	if len(paramRanked) == 0 {
		rctx.Ranked = true
	} else {
		rawRanked := paramRanked[0]
		if ranked, err2 := strconv.ParseBool(rawRanked); err2 == nil {
			rctx.Ranked = ranked
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ranked", rawRanked, "boolean"))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) > 0 {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			tmp42 := task
			tmp41 := &tmp42
			rctx.Task = tmp41
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
		if rctx.Task != nil {
			if *rctx.Task < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`task`, *rctx.Task, 0, true))
			}
		}
	}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			tmp44 := user
			tmp43 := &tmp44
			rctx.User = tmp43
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
		if rctx.User != nil {
			if *rctx.User < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`user`, *rctx.User, 0, true))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowResultContext) OK(r ComJossemargtSaoResultCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowResultContext) OKFull(r ComJossemargtSaoResultFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowResultContext) OKLink(r ComJossemargtSaoResultLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowResultContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetScoresContext provides the scores get action context.
type GetScoresContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ScoreID string
}

// NewGetScoresContext parses the incoming request URL and body, performs validations and creates the
// context used by the scores controller get action.
func NewGetScoresContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetScoresContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetScoresContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramScoreID := req.Params["scoreID"]
	if len(paramScoreID) > 0 {
		rawScoreID := paramScoreID[0]
		rctx.ScoreID = rawScoreID
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetScoresContext) OKFull(r *ComJossemargtSaoScoreFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.score+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetScoresContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetScoresContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowScoresContext provides the scores show action context.
type ShowScoresContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest  *int
	Entry    *int
	Page     int
	PageSize int
	Sort     string
	Task     *int
	User     *int
}

// NewShowScoresContext parses the incoming request URL and body, performs validations and creates the
// context used by the scores controller show action.
func NewShowScoresContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowScoresContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowScoresContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) > 0 {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			tmp46 := contest
			tmp45 := &tmp46
			rctx.Contest = tmp45
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
		if rctx.Contest != nil {
			if *rctx.Contest < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`contest`, *rctx.Contest, 0, true))
			}
		}
	}
	paramEntry := req.Params["entry"]
	if len(paramEntry) > 0 {
		rawEntry := paramEntry[0]
		if entry, err2 := strconv.Atoi(rawEntry); err2 == nil {
			tmp48 := entry
			tmp47 := &tmp48
			rctx.Entry = tmp47
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("entry", rawEntry, "integer"))
		}
		if rctx.Entry != nil {
			if *rctx.Entry < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`entry`, *rctx.Entry, 0, true))
			}
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 10
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) > 0 {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			tmp52 := task
			tmp51 := &tmp52
			rctx.Task = tmp51
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
		if rctx.Task != nil {
			if *rctx.Task < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`task`, *rctx.Task, 0, true))
			}
		}
	}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			tmp54 := user
			tmp53 := &tmp54
			rctx.User = tmp53
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
		if rctx.User != nil {
			if *rctx.User < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`user`, *rctx.User, 0, true))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowScoresContext) OK(r ComJossemargtSaoScoreCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.score+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoScoreCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowScoresContext) OKFull(r ComJossemargtSaoScoreFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.score+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoScoreFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowScoresContext) OKLink(r ComJossemargtSaoScoreLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.score+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoScoreLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowScoresContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
