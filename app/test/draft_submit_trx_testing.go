// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "SAO": DraftSubmitTrx TestHelpers
//
// Command:
// $ go generate

package test

import (
	"bytes"
	"context"
	"fmt"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
	"github.com/jossemargt/cms-sao/app"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strconv"
)

// GetDraftSubmitTrxBadRequest runs the method Get of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetDraftSubmitTrxBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.DraftSubmitTrxController, trxID string, trxD *int) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		query["trxD"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/sao/v1/draft-submit-transaction/%v", trxID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["trxID"] = []string{fmt.Sprintf("%v", trxID)}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		prms["trxD"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "DraftSubmitTrxTest"), rw, req, prms)
	getCtx, _err := app.NewGetDraftSubmitTrxContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}

	// Perform action
	_err = ctrl.Get(getCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// GetDraftSubmitTrxGone runs the method Get of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetDraftSubmitTrxGone(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.DraftSubmitTrxController, trxID string, trxD *int) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		query["trxD"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/sao/v1/draft-submit-transaction/%v", trxID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["trxID"] = []string{fmt.Sprintf("%v", trxID)}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		prms["trxD"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "DraftSubmitTrxTest"), rw, req, prms)
	getCtx, _err := app.NewGetDraftSubmitTrxContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Get(getCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 410 {
		t.Errorf("invalid response status code: got %+v, expected 410", rw.Code)
	}

	// Return results
	return rw
}

// GetDraftSubmitTrxNotFound runs the method Get of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetDraftSubmitTrxNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.DraftSubmitTrxController, trxID string, trxD *int) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		query["trxD"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/sao/v1/draft-submit-transaction/%v", trxID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["trxID"] = []string{fmt.Sprintf("%v", trxID)}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		prms["trxD"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "DraftSubmitTrxTest"), rw, req, prms)
	getCtx, _err := app.NewGetDraftSubmitTrxContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Get(getCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// GetDraftSubmitTrxOK runs the method Get of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetDraftSubmitTrxOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.DraftSubmitTrxController, trxID string, trxD *int) (http.ResponseWriter, *app.ComJossemargtSaoDraftSubmitTransaction) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		query["trxD"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/sao/v1/draft-submit-transaction/%v", trxID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["trxID"] = []string{fmt.Sprintf("%v", trxID)}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		prms["trxD"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "DraftSubmitTrxTest"), rw, req, prms)
	getCtx, _err := app.NewGetDraftSubmitTrxContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.Get(getCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.ComJossemargtSaoDraftSubmitTransaction
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.ComJossemargtSaoDraftSubmitTransaction)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ComJossemargtSaoDraftSubmitTransaction", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// GetDraftSubmitTrxOKFull runs the method Get of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetDraftSubmitTrxOKFull(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.DraftSubmitTrxController, trxID string, trxD *int) (http.ResponseWriter, *app.ComJossemargtSaoDraftSubmitTransactionFull) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		query["trxD"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/sao/v1/draft-submit-transaction/%v", trxID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["trxID"] = []string{fmt.Sprintf("%v", trxID)}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		prms["trxD"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "DraftSubmitTrxTest"), rw, req, prms)
	getCtx, _err := app.NewGetDraftSubmitTrxContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.Get(getCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.ComJossemargtSaoDraftSubmitTransactionFull
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.ComJossemargtSaoDraftSubmitTransactionFull)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ComJossemargtSaoDraftSubmitTransactionFull", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// GetDraftSubmitTrxOKLink runs the method Get of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetDraftSubmitTrxOKLink(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.DraftSubmitTrxController, trxID string, trxD *int) (http.ResponseWriter, *app.ComJossemargtSaoDraftSubmitTransactionLink) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		query["trxD"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/sao/v1/draft-submit-transaction/%v", trxID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["trxID"] = []string{fmt.Sprintf("%v", trxID)}
	if trxD != nil {
		sliceVal := []string{strconv.Itoa(*trxD)}
		prms["trxD"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "DraftSubmitTrxTest"), rw, req, prms)
	getCtx, _err := app.NewGetDraftSubmitTrxContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.Get(getCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.ComJossemargtSaoDraftSubmitTransactionLink
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.ComJossemargtSaoDraftSubmitTransactionLink)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ComJossemargtSaoDraftSubmitTransactionLink", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}
