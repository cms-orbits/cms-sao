// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "SAO": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/jossemargt/cms-sao/design
// --notool=true
// --out=$(GOPATH)/src/github.com/jossemargt/cms-sao
// --version=v1.4.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ActionsController is the controller interface for the Actions actions.
type ActionsController interface {
	goa.Muxer
	SubmitEntry(*SubmitEntryActionsContext) error
	SubmitEntryDraft(*SubmitEntryDraftActionsContext) error
	SummarizeScore(*SummarizeScoreActionsContext) error
}

// MountActionsController "mounts" a Actions resource controller on the given service.
func MountActionsController(service *goa.Service, ctrl ActionsController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSubmitEntryActionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*EntryPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.SubmitEntry(rctx)
	}
	service.Mux.Handle("POST", "/sao/v1/submit-entry", ctrl.MuxHandler("submitEntry", h, unmarshalSubmitEntryActionsPayload))
	service.LogInfo("mount", "ctrl", "Actions", "action", "SubmitEntry", "route", "POST /sao/v1/submit-entry")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSubmitEntryDraftActionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*EntryPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.SubmitEntryDraft(rctx)
	}
	service.Mux.Handle("POST", "/sao/v1/submit-draft", ctrl.MuxHandler("submitEntryDraft", h, unmarshalSubmitEntryDraftActionsPayload))
	service.LogInfo("mount", "ctrl", "Actions", "action", "SubmitEntryDraft", "route", "POST /sao/v1/submit-draft")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSummarizeScoreActionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.SummarizeScore(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/summarize-score", ctrl.MuxHandler("summarizeScore", h, nil))
	service.LogInfo("mount", "ctrl", "Actions", "action", "SummarizeScore", "route", "GET /sao/v1/summarize-score")
}

// unmarshalSubmitEntryActionsPayload unmarshals the request body into the context request data Payload field.
func unmarshalSubmitEntryActionsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &entryPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	payload.Finalize()
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalSubmitEntryDraftActionsPayload unmarshals the request body into the context request data Payload field.
func unmarshalSubmitEntryDraftActionsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &entryPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	payload.Finalize()
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// DraftController is the controller interface for the Draft actions.
type DraftController interface {
	goa.Muxer
	Get(*GetDraftContext) error
	Show(*ShowDraftContext) error
}

// MountDraftController "mounts" a Draft resource controller on the given service.
func MountDraftController(service *goa.Service, ctrl DraftController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetDraftContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/drafts/:draftID", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Draft", "action", "Get", "route", "GET /sao/v1/drafts/:draftID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowDraftContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/drafts/", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Draft", "action", "Show", "route", "GET /sao/v1/drafts/")
}

// DraftresultController is the controller interface for the Draftresult actions.
type DraftresultController interface {
	goa.Muxer
	Get(*GetDraftresultContext) error
	Show(*ShowDraftresultContext) error
}

// MountDraftresultController "mounts" a Draftresult resource controller on the given service.
func MountDraftresultController(service *goa.Service, ctrl DraftresultController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetDraftresultContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/draft-results/:resultID", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Draftresult", "action", "Get", "route", "GET /sao/v1/draft-results/:resultID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowDraftresultContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/draft-results/", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Draftresult", "action", "Show", "route", "GET /sao/v1/draft-results/")
}

// EntryController is the controller interface for the Entry actions.
type EntryController interface {
	goa.Muxer
	Get(*GetEntryContext) error
	Show(*ShowEntryContext) error
}

// MountEntryController "mounts" a Entry resource controller on the given service.
func MountEntryController(service *goa.Service, ctrl EntryController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetEntryContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/entries/:entryID", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Entry", "action", "Get", "route", "GET /sao/v1/entries/:entryID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowEntryContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/entries/", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Entry", "action", "Show", "route", "GET /sao/v1/entries/")
}

// ResultController is the controller interface for the Result actions.
type ResultController interface {
	goa.Muxer
	Get(*GetResultContext) error
	Show(*ShowResultContext) error
}

// MountResultController "mounts" a Result resource controller on the given service.
func MountResultController(service *goa.Service, ctrl ResultController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetResultContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/results/:resultID", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Result", "action", "Get", "route", "GET /sao/v1/results/:resultID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowResultContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/results/", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Result", "action", "Show", "route", "GET /sao/v1/results/")
}
