// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "SAO v1": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/jossemargt/cms-sao/design
// --force=true
// --notool=true
// --out=$(GOPATH)/src/github.com/jossemargt/cms-sao
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// EntryController is the controller interface for the Entry actions.
type EntryController interface {
	goa.Muxer
	Create(*CreateEntryContext) error
	Get(*GetEntryContext) error
	Show(*ShowEntryContext) error
}

// MountEntryController "mounts" a Entry resource controller on the given service.
func MountEntryController(service *goa.Service, ctrl EntryController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateEntryContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*EntryPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/sao/v1/entries/", ctrl.MuxHandler("create", h, unmarshalCreateEntryPayload))
	service.LogInfo("mount", "ctrl", "Entry", "action", "Create", "route", "POST /sao/v1/entries/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetEntryContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/entries/:entryID", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Entry", "action", "Get", "route", "GET /sao/v1/entries/:entryID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowEntryContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/entries/", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Entry", "action", "Show", "route", "GET /sao/v1/entries/")
}

// unmarshalCreateEntryPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateEntryPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &entryPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	payload.Finalize()
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// ResultController is the controller interface for the Result actions.
type ResultController interface {
	goa.Muxer
	Get(*GetResultContext) error
	Show(*ShowResultContext) error
}

// MountResultController "mounts" a Result resource controller on the given service.
func MountResultController(service *goa.Service, ctrl ResultController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetResultContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/results/:resultID", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Result", "action", "Get", "route", "GET /sao/v1/results/:resultID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowResultContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/results/", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Result", "action", "Show", "route", "GET /sao/v1/results/")
}

// ScoresController is the controller interface for the Scores actions.
type ScoresController interface {
	goa.Muxer
	Get(*GetScoresContext) error
	Show(*ShowScoresContext) error
}

// MountScoresController "mounts" a Scores resource controller on the given service.
func MountScoresController(service *goa.Service, ctrl ScoresController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetScoresContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/scores/:scoreID", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Scores", "action", "Get", "route", "GET /sao/v1/scores/:scoreID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowScoresContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/sao/v1/scores/", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Scores", "action", "Show", "route", "GET /sao/v1/scores/")
}
